#!/bin/bash

echo "=== Budget PWA Backend Diagnostics ==="
echo

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
echo "1. Checking file structure..."
echo "üìÅ Required files:"
for file in "main.go" "db/migrate.sql" "db/sqlite.go" "api/auth.go" "api/entities.go" "api/sync.go" "internal/models.go" "internal/jwt.go"; do
    if [ -f "$file" ]; then
        echo "  ‚úÖ $file"
    else
        echo "  ‚ùå MISSING: $file"
    fi
done
echo

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ go.mod
echo "2. Checking go.mod..."
if [ -f "go.mod" ]; then
    echo "  ‚úÖ go.mod exists"
    echo "  üìã Module: $(head -1 go.mod)"
else
    echo "  ‚ùå MISSING: go.mod"
fi
echo

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "3. Checking dependencies..."
go list -m all 2>/dev/null | head -5
echo

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data
echo "4. Checking data directory..."
if [ -d "data" ]; then
    echo "  ‚úÖ data/ directory exists"
    ls -la data/
else
    echo "  ‚ö†Ô∏è  Creating data/ directory"
    mkdir -p data
fi
echo

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ SQLite
echo "5. Testing SQLite connection..."
if command -v sqlite3 &> /dev/null; then
    echo "  ‚úÖ sqlite3 available"
    echo "CREATE TABLE test(id INTEGER);" | sqlite3 data/test.db 2>/dev/null && echo "  ‚úÖ SQLite write test OK" || echo "  ‚ùå SQLite write test failed"
    rm -f data/test.db
else
    echo "  ‚ö†Ô∏è  sqlite3 not installed"
fi
echo

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo "6. Checking environment..."
if [ -n "$JWT_SECRET" ]; then
    echo "  ‚úÖ JWT_SECRET is set (length: ${#JWT_SECRET})"
else
    echo "  ‚ö†Ô∏è  JWT_SECRET not set (using default)"
fi

if [ -n "$DB_PATH" ]; then
    echo "  ‚úÖ DB_PATH is set: $DB_PATH"
else
    echo "  ‚ÑπÔ∏è  DB_PATH not set (using default: ./data/budget.db)"
fi
echo

# 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏
echo "7. Testing build..."
go build -o budget-api-test main.go 2>/dev/null
if [ $? -eq 0 ]; then
    echo "  ‚úÖ Build successful"
    rm -f budget-api-test
else
    echo "  ‚ùå Build failed"
    echo "  üìù Error details:"
    go build -o budget-api-test main.go
fi
echo

# 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
echo "8. Checking ports..."
if lsof -i :8080 >/dev/null 2>&1; then
    echo "  ‚ö†Ô∏è  Port 8080 already in use:"
    lsof -i :8080
else
    echo "  ‚úÖ Port 8080 available"
fi
echo

echo "=== Diagnostics Complete ==="
echo "To fix common issues:"
echo "1. Set JWT_SECRET: export JWT_SECRET='your-secret-key-here'"
echo "2. Install SQLite dev: sudo dnf install -y sqlite-devel gcc"  
echo "3. Run with CGO: CGO_ENABLED=1 go run main.go"
echo "4. Check firewall: sudo firewall-cmd --list-ports"