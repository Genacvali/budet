// –ü—Ä–æ—Å—Ç–æ–π —Å–ª–æ–π –Ω–∞–¥ —Ç–≤–æ–∏–º–∏ API/partial, –±–µ–∑ HTMX –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
async function refreshState(){
  const m = document.getElementById('m').value;
  const res = await fetch(`/api/state?m=${encodeURIComponent(m)}`);
  const s = await res.json();

  // prev
  const prev = document.getElementById('prev');
  prev.textContent = `–ü—Ä–æ—à–ª—ã–π: ${s.prev}`;

  // sources KPIs
  const wrap = document.getElementById('sources');
  wrap.innerHTML = '';
  const order = ['–ó–ü','–ê–≤–∞–Ω—Å','–î–µ–∫—Ä–µ—Ç–Ω—ã–µ'];
  for (const src of order){
    const base = Math.round((s.summary.base || {})[src] || 0).toLocaleString('ru-RU');
    const inc  = Math.round((s.summary.inc_cur || {})[src] || 0).toLocaleString('ru-RU');
    const car  = Math.round((s.summary.carry  || {})[src] || 0).toLocaleString('ru-RU');
    const col = document.createElement('div');
    col.className = 'col-12 col-md-4';
    col.innerHTML = `
      <div class="card card-kpi"><div class="card-body">
        <div class="d-flex justify-content-between">
          <div class="fw-semibold">${src}</div>
          <span class="badge text-bg-secondary">–±–∞–∑–∞: ${base} ‚ÇΩ</span>
        </div>
        <div class="small mt-2">–î–æ—Ö–æ–¥: ${inc} ‚ÇΩ ¬∑ –ü–µ—Ä–µ–Ω–æ—Å: ${car} ‚ÇΩ</div>
      </div></div>`;
    wrap.appendChild(col);
  }

  // –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–µ–ª–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –º–æ–¥–∞–ª–∫–µ ¬´–º–∏–Ω—É—Å¬ª
  const minusSel = document.getElementById('minus-cat');
  minusSel.innerHTML = '';
  (s.rows || []).forEach(r=>{
    const o = document.createElement('option');
    o.value = r.id; o.textContent = r.name;
    minusSel.appendChild(o);
  });
}

async function simpleAddIncome(){
  const dt = document.getElementById('inc-date').value;
  const source = document.getElementById('inc-source').value;
  const amount = parseFloat(document.getElementById('inc-amount').value || '0');
  if(!dt || !(amount>0)) return;
  
  try {
    await fetch('/api/income/add',{
      method:'POST', headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ dt, source, amount })
    });
    document.getElementById('inc-amount').value = '';
    await refreshTableAndState();
    bootstrap.Modal.getInstance(document.getElementById('incomeModal')).hide();
  } catch(err) {
    alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞');
  }
}

async function simpleMinus(){
  const ym = document.getElementById('m').value;
  const category_id = parseInt(document.getElementById('minus-cat').value,10);
  const amount = parseFloat(document.getElementById('minus-amount').value || '0');
  if(!(category_id>0 && amount>0)) return;
  
  try {
    await fetch('/api/minus',{
      method:'POST', headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ ym, category_id, amount })
    });
    document.getElementById('minus-amount').value = '';
    await refreshTableAndState();
    bootstrap.Modal.getInstance(document.getElementById('minusModal')).hide();
  } catch(err) {
    alert('–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è');
  }
}

async function simpleAddCategory(){
  const name = document.getElementById('cat-name').value.trim();
  const source = document.getElementById('cat-source').value;
  const percent = document.getElementById('cat-percent').value || null;
  const fixed_rub = document.getElementById('cat-fixed').value || null;
  if(!name) return;
  
  try {
    await fetch('/api/category/add',{
      method:'POST', headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ name, source, percent, fixed_rub })
    });
    document.getElementById('cat-name').value = '';
    document.getElementById('cat-percent').value = '';
    document.getElementById('cat-fixed').value = '';
    await refreshTableAndState();
    bootstrap.Modal.getInstance(document.getElementById('categoryModal')).hide();
  } catch(err) {
    alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
  }
}

async function refreshTableAndState(){
  const m = document.getElementById('m').value;
  // –æ–±–Ω–æ–≤–∏–º partial —Ç–∞–±–ª–∏—Ü—ã (HTMX-—ç–ª–µ–º–µ–Ω—Ç)
  const wr = document.getElementById('table-wrap');
  wr.setAttribute('hx-get', `/partials/table?m=${encodeURIComponent(m)}&compact=1`);
  htmx.process(wr);
  htmx.trigger(wr, 'load');
  await refreshState();
}

// Theme toggle functionality
function initThemeToggle() {
  const themeToggle = document.getElementById('themeToggle');
  const html = document.documentElement;
  
  // Get saved theme or default to dark
  const savedTheme = localStorage.getItem('theme') || 'dark';
  html.setAttribute('data-bs-theme', savedTheme);
  updateThemeButton(savedTheme);
  
  themeToggle?.addEventListener('click', () => {
    const currentTheme = html.getAttribute('data-bs-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    
    html.setAttribute('data-bs-theme', newTheme);
    localStorage.setItem('theme', newTheme);
    updateThemeButton(newTheme);
  });
}

function updateThemeButton(theme) {
  const themeToggle = document.getElementById('themeToggle');
  if (themeToggle) {
    themeToggle.textContent = theme === 'dark' ? '‚òÄÔ∏è –°–≤–µ—Ç–ª–æ' : 'üåô –¢–µ–º–Ω–æ';
  }
}

window.addEventListener('DOMContentLoaded', () => {
  refreshState();
  initThemeToggle();
});