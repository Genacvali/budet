# app/db.py
import os
from pathlib import Path
import aiosqlite
import logging

log = logging.getLogger(__name__)

DB_PATH = os.environ.get("DB_PATH", "./data/budget.db")

SCHEMA_CANDIDATES = [
    "db/migrate.sql",             # backend-py/db/migrate.sql
    "backend/db/migrate.sql",     # –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞—é—Ç –∏–∑ –∫–æ—Ä–Ω—è —Ä–µ–ø–æ (—Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
]

async def init_db():
    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    Path(DB_PATH).parent.mkdir(parents=True, exist_ok=True)

    # –∏—â–µ–º migrate.sql
    schema_path = None
    for p in SCHEMA_CANDIDATES:
        if Path(p).exists():
            schema_path = p
            break
    if not schema_path:
        raise FileNotFoundError("migrate.sql not found in: " + ", ".join(SCHEMA_CANDIDATES))

    sql = Path(schema_path).read_text(encoding="utf-8")

    log.info("üóÑÔ∏è  Initializing database...")

    async with aiosqlite.connect(DB_PATH, timeout=5) as db:
        # PRAGMA ‚Äî —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ connect
        await db.execute("PRAGMA journal_mode=WAL;")
        await db.execute("PRAGMA foreign_keys=ON;")
        # –í–ê–ñ–ù–û: –≤—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—Å—å —Å–∫—Ä–∏–ø—Ç —Ü–µ–ª–∏–∫–æ–º
        await db.executescript(sql)
        await db.commit()

    log.info("‚úÖ Migrations applied")
